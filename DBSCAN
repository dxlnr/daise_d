#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 30 15:00:07 2018

@author: MikkelGronning
"""

import numpy as np
from sklearn.cluster import DBSCAN
import my_functions as my_f
import matplotlib.pyplot as plt

def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return array[idx]


def DBSACN_Clusters(data):
    
    [disInd, disMat] = my_f.KNNTimeSeries(X=data, k=1, MinToCompare=30, progress=False)
    
    disMatSorted = np.sort(disMat[:,0])
    n = len(disMat[:,0])
    
    slope = ( disMatSorted[1:n] - disMatSorted[0:(n-1)]  )  * n
    
    # Using a threshold value of 0.01% so that the slope has a slope of 1% difference
    # is an optimal Eps value. 
    val = find_nearest(slope, 0.01)
    minSamples = np.floor(np.log(len(datasets[0])))
    
    X = data.reshape(-1, 1)
    clustering = DBSCAN(eps = val, min_samples=minSamples, metric='euclidean').fit(X)
    
    Clusters = clustering.labels_
    
    print(val)
    print(minSamples)
    print(np.unique(clustering.labels_))
    
    return(Clusters)


#%%
HDF5_Files = np.sort(my_f.All_HDF5("preprocced_data/"))


for i in range(0,3):
    
    [ls, datasets] = my_f.loadHDF5_File(HDF5_Files[i])

    
    ## current_rms1
    ## current_rms2
    ## current_rms3
    clusters = []
    for j in range(3,6):
        
        print(ls[j])
        [disInd, disMat] = my_f.KNNTimeSeries(X=datasets[j], k=1, MinToCompare=30, progress=False)
        
        clusters.append(DBSACN_Clusters( disMat,  datasets[j] ))
        
    name = "clusters/" +  HDF5_Files[i][-13:]    
    my_f.createHDF5(name, ls[0:3], clusters)
    
